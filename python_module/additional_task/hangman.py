"""
This module contains the game Hangman
"""
from random_word import RandomWords


def generate_random_word() -> str:
    """
    This function generates random english word using python package Random-Word

    Returns:
        str: generated word
    """
    random_word_obj = RandomWords()
    new_random_word = random_word_obj.get_random_word(hasDictionaryDef="true",
                                                      includePartOfSpeech="noun",
                                                      minLength=5, maxLength=8)
    return new_random_word


def save_word(new_random_word: str) -> type(None):
    """
    This function adds the word in file "used_words.txt"

    Receives:
        new_random_word: str: word which was generated for current game
    Returns:
        type(None): Returning None
    """
    file = open("used_words.txt", "a")
    file.write(new_random_word + "\n")
    file.close()


def is_used_word(current_random_word: str) -> bool:
    """
    This function checks checks if the generated word has already been played in past games

    Receives:
        current_random_word: str: word which was generated by random
    Returns:
        bool: True - if the word was used, False - if word wasn't used
    """
    file = open("used_words.txt", "r")
    used_words = [line.strip() for line in file]
    for word in used_words:
        if word == current_random_word:
            return True
    return False


def read_used_words() -> type(None):
    """
    This function reads words that were played from file

    Returns:
        type(None): Returning None
    """
    file = open("used_words.txt", "r")
    if file:
        used_words = [line.strip() for line in file]
        if used_words:
            used_words_str = ", ".join(used_words)
            print(used_words_str)
        else:
            print("You haven't played yet!")
    else:
        print("File wasn't found")


def hidden_word(size: int) -> str:
    """
    This function hides letters in word replacing underscores

    Receives:
        size: int: length of word
    Returns:
        str: string that includes underscores
    """
    return '_ ' * size


def print_man_round(attempt: int) -> str:
    """
    This function prints visual display of the number of attempts

    Receives:
        attempts: int: amount of attempts that player has
    Returns:
        str: visual display of current attempt
    """
    hangman_pics = ['''
      +---+
      |   |
          |
          |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
          |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
      |   |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /|   |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /||  |
          |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /||  |
     /    |
          |
    =========''', '''
      +---+
      |   |
      O   |
     /||  |
     / |  |
          |
    =========''']
    return hangman_pics[6 - attempt]


def game(play_word: str) -> type(None):
    """
    This function contains the logic of the game:
    The player has 6 attempts per word. When the word is guessed,
    the variable 'guessed' is set to True. As long as the number of attempts is greater
    than zero and the variable 'guessed' is false, the game continues.
    The letters entered by the player are added to list 'input_letters',
    the ones that are guessed in the list 'guessed'.
    If the player guesses wrong in 6 attempts, the word is displayed.

    Receives:
        play_word: str: the main word in current game that will be played
    Returns:
        type(None): Returning None
    """
    attempts: int = 6
    guessed: bool = False
    input_letters = []
    guessed_letters = []
    word_with_guessed: str = hidden_word(len(play_word))
    while attempts > 0 and not guessed:
        print(print_man_round(attempts))
        print("YOU HAVE ", attempts, " ATTEMPTS")
        print(word_with_guessed)
        print("You've already tried: ", ", ".join(input_letters))
        input_letter: str = input("Please, enter the letter or the whole word: ")
        if input_letter.isalpha() and len(input_letter) == 1:
            if input_letter in play_word:
                input_letters.append(input_letter)
                guessed_letters.append(input_letter)
                list_word_letters = list(play_word)
                for i, letter in enumerate(list_word_letters):
                    if letter not in guessed_letters:
                        list_word_letters[i] = '_'
                word_with_guessed = "".join(list_word_letters)
                print(word_with_guessed)
                if "_" not in word_with_guessed:
                    guessed = True
                    print("You win!")
            elif input_letter in input_letters:
                print("You entered this letter!")
            else:
                input_letters.append(input_letter)
                attempts -= 1
        elif input_letter.isalpha() and len(input_letter) == len(play_word):
            if input_letter != play_word:
                attempts -= 1
                input_letters.append(input_letter)
            else:
                guessed = True
                print("You win!")
        if attempts == 0:
            print(print_man_round(0))
            print("GAME OVER \nThe word was ", play_word.upper())


if __name__ == "__main__":
    while True:
        choice: int = int(input("Please select the options: \n1 - Start \n2 - See played words "
                                "\n0 - Exit\n"))
        if choice == 1:
            game_word: str = generate_random_word()
            while is_used_word(game_word):
                game_word = generate_random_word()
            save_word(game_word)
            game(game_word)
        elif choice == 2:
            read_used_words()
        elif choice == 0:
            print("Exit ")
            break
        else:
            print("Incorrect entering, please, try again ")
            continue
